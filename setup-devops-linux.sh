#!/usr/bin/env bash
set -e

# ---------- –¶–≤–µ—Ç–∞ ----------
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
RED="\033[0;31m"
NC="\033[0m"
info()    { echo -e "${YELLOW}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[OK]${NC} $1"; }
error()   { echo -e "${RED}[ERROR]${NC} $1"; }
warn()    { echo -e "${YELLOW}[WARN]${NC} $1"; }

# ---------- –ê—Ä–≥—É–º–µ–Ω—Ç—ã ----------
MODE=""
for arg in "$@"; do
  case "$arg" in
    --all|-a) MODE="all" ;;
    --gui)    MODE="gui" ;;
    --cli)    MODE="cli" ;;
    --debug)  set -x ;;
    --no-color) GREEN=""; YELLOW=""; RED=""; NC="" ;;
  esac
done

# ---------- –ü—Ä–æ–≤–µ—Ä–∫–∞ CI (–¥–ª—è Flatpak –∏ GUI) ----------
if [[ "$CI" == "true" ]]; then
  info "CI-—Å—Ä–µ–¥–∞: GUI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ Flatpak –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã"
  MODE="cli"
  SKIP_GUI=true
fi

# ---------- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ----------
detect_package_manager() {
  if command -v apt &>/dev/null; then
    echo "apt"
  elif command -v dnf &>/dev/null; then
    echo "dnf"
  elif command -v pacman &>/dev/null; then
    echo "pacman"
  else
    echo "unsupported"
  fi
}

PKG_MANAGER=$(detect_package_manager)
if [[ "$PKG_MANAGER" == "unsupported" ]]; then
  error "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è apt, dnf, pacman."
  exit 1
fi

# ---------- –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ ----------
install_pkg() {
  case "$PKG_MANAGER" in
    apt) sudo apt-get update && sudo apt-get install -y "$@" ;;
    dnf) sudo dnf install -y "$@" ;;
    pacman) sudo pacman -Sy --noconfirm "$@" ;;
  esac
}

# ---------- pipx + Python ----------
info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é pipx –∏ Python..."
install_pkg python3 python3-pip python3-venv zsh wget curl git unzip
python3 -m pip install --user pipx
export PATH="$HOME/.local/bin:$PATH"
python3 -m pipx ensurepath || true

# ---------- gum ----------
if ! command -v gum &>/dev/null; then
  info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é gum..."
  GUM_VERSION="0.12.0"
  GUM_URL="https://github.com/charmbracelet/gum/releases/download/v${GUM_VERSION}/gum_${GUM_VERSION}_linux_amd64.tar.gz"
  TMP_DIR=$(mktemp -d)
  cd "$TMP_DIR"
  if curl -fsSLO "$GUM_URL"; then
    tar -xzf gum_${GUM_VERSION}_linux_amd64.tar.gz
    sudo mv gum /usr/local/bin/
    success "gum —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
  else
    warn "‚ö†Ô∏è gum –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å. –ü—Ä–æ–¥–æ–ª–∂–∏–º –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"
  fi
  cd -
fi

# ---------- Flatpak (–µ—Å–ª–∏ –Ω–µ –≤ CI) ----------
if [[ "$SKIP_GUI" != "true" && ! $(command -v flatpak) ]]; then
  info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Flatpak..."
  install_pkg flatpak
  sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo || true
fi

# ---------- CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ----------
CLI_TOOLS=(
  "kubectl:install_pkg kubectl"
  "helm:install_pkg helm"
  "k9s:install_pkg k9s"
  "terraform:install_pkg terraform"
  "lazygit:install_pkg lazygit"
  "fzf:install_pkg fzf"
  "bat:install_pkg bat"
  "htop:install_pkg htop"
  "ncdu:install_pkg ncdu"
  "tree:install_pkg tree"
  "neovim:install_pkg neovim"
)

# ---------- GUI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –Ω–µ –≤ CI) ----------
if [[ "$SKIP_GUI" != "true" ]]; then
  GUI_TOOLS=(
    "VSCode:flatpak install -y flathub com.visualstudio.code"
    "PgAdmin:flatpak install -y flathub io.pgadmin.pgadmin4"
    "SQLite Browser:flatpak install -y flathub io.github.sqlitebrowser.sqlitebrowser"
    "Lens:flatpak install -y flathub dev.k8slens.OpenLens"
  )
else
  GUI_TOOLS=()
fi

# ---------- –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ----------
select_tools() {
  if [[ -n "$MODE" ]]; then
    case "$MODE" in
      all) FINAL_LIST=("${CLI_TOOLS[@]}" "${GUI_TOOLS[@]}") ;;
      cli) FINAL_LIST=("${CLI_TOOLS[@]}") ;;
      gui) FINAL_LIST=("${GUI_TOOLS[@]}") ;;
    esac
  elif command -v gum &>/dev/null; then
    CHOICES=$(printf "%s\n\n%s\n\n%s" \
      "===== üñ•Ô∏è GUI =====" "${GUI_TOOLS[@]}" \
      "===== üõ†Ô∏è CLI =====" "${CLI_TOOLS[@]}" |
      grep -v '^$' |
      gum choose --no-limit --height=40 --header="–í—ã–±–µ—Ä–∏ DevOps-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    FINAL_LIST=($CHOICES)
  else
    FINAL_LIST=("${CLI_TOOLS[@]}")
  fi
}

select_tools

# ---------- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ----------
for item in "${FINAL_LIST[@]}"; do
  TOOL_NAME=$(echo "$item" | cut -d ':' -f1)
  TOOL_CMD=$(echo "$item" | cut -d ':' -f2-)
  echo -e "\nüîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞: $TOOL_NAME"
  bash -c "$TOOL_CMD" && success "$TOOL_NAME —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
done

# ---------- Oh My Zsh ----------
if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
  info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Oh My Zsh..."
  if ! command -v zsh &>/dev/null; then
    error "Zsh –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π."
    exit 1
  fi
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.oh-my-zsh/custom/themes/powerlevel10k
  git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
  git clone https://github.com/zsh-users/zsh-syntax-highlighting ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
  git clone https://github.com/zsh-users/zsh-completions ~/.oh-my-zsh/custom/plugins/zsh-completions
  git clone https://github.com/agkozak/zsh-z ~/.oh-my-zsh/custom/plugins/zsh-z
fi

info "–ó–∞–≥—Ä—É–∂–∞—é .zshrc –∏ .p10k.zsh..."
curl -fsSL https://raw.githubusercontent.com/justrunme/devops-tools/main/dotfiles/.zshrc -o ~/.zshrc
curl -fsSL https://raw.githubusercontent.com/justrunme/devops-tools/main/dotfiles/.p10k.zsh -o ~/.p10k.zsh

# ---------- Zsh –∫–∞–∫ shell ----------
if [[ "$SHELL" != *zsh* ]]; then
  chsh -s "$(command -v zsh)" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å shell –Ω–∞ zsh"
fi

# ---------- Neovim + Lazy.nvim ----------
info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Neovim..."
mkdir -p ~/.config/nvim/lua
curl -fsSL https://raw.githubusercontent.com/justrunme/devops-tools/main/nvim/init.lua -o ~/.config/nvim/init.lua
curl -fsSL https://raw.githubusercontent.com/justrunme/devops-tools/main/nvim/lua/plugins.lua -o ~/.config/nvim/lua/plugins.lua
git clone https://github.com/folke/lazy.nvim ~/.local/share/nvim/lazy/lazy.nvim || true
nvim --headless "+Lazy! sync" +qa || true

# ---------- –ì–æ—Ç–æ–≤–æ ----------
echo -e "\n${GREEN}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
echo -e "${YELLOW}‚û°Ô∏è –ü—Ä–æ–≤–µ—Ä—å: source ~/.zshrc –∏ nvim + :Lazy${NC}"
